// Generated by gencpp from file vmxpi_ros/MotorSpeedRequest.msg
// DO NOT EDIT!


#ifndef VMXPI_ROS_MESSAGE_MOTORSPEEDREQUEST_H
#define VMXPI_ROS_MESSAGE_MOTORSPEEDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vmxpi_ros
{
template <class ContainerAllocator>
struct MotorSpeedRequest_
{
  typedef MotorSpeedRequest_<ContainerAllocator> Type;

  MotorSpeedRequest_()
    : motor(0)
    , speed(0.0)  {
    }
  MotorSpeedRequest_(const ContainerAllocator& _alloc)
    : motor(0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _motor_type;
  _motor_type motor;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MotorSpeedRequest_

typedef ::vmxpi_ros::MotorSpeedRequest_<std::allocator<void> > MotorSpeedRequest;

typedef boost::shared_ptr< ::vmxpi_ros::MotorSpeedRequest > MotorSpeedRequestPtr;
typedef boost::shared_ptr< ::vmxpi_ros::MotorSpeedRequest const> MotorSpeedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator1> & lhs, const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator2> & rhs)
{
  return lhs.motor == rhs.motor &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator1> & lhs, const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vmxpi_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c74fe58695fd9150f0fc1ab8000015b6";
  }

  static const char* value(const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc74fe58695fd9150ULL;
  static const uint64_t static_value2 = 0xf0fc1ab8000015b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vmxpi_ros/MotorSpeedRequest";
  }

  static const char* value(const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 motor\n"
"float32 speed\n"
;
  }

  static const char* value(const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorSpeedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vmxpi_ros::MotorSpeedRequest_<ContainerAllocator>& v)
  {
    s << indent << "motor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VMXPI_ROS_MESSAGE_MOTORSPEEDREQUEST_H
