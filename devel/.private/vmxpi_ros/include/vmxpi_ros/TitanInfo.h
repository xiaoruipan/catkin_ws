// Generated by gencpp from file vmxpi_ros/TitanInfo.msg
// DO NOT EDIT!


#ifndef VMXPI_ROS_MESSAGE_TITANINFO_H
#define VMXPI_ROS_MESSAGE_TITANINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vmxpi_ros
{
template <class ContainerAllocator>
struct TitanInfo_
{
  typedef TitanInfo_<ContainerAllocator> Type;

  TitanInfo_()
    : deviceID(0)
    , verMaj(0)
    , verMin(0)
    , verBuild(0)
    , hardware(0)
    , hardwareRev(0)  {
    }
  TitanInfo_(const ContainerAllocator& _alloc)
    : deviceID(0)
    , verMaj(0)
    , verMin(0)
    , verBuild(0)
    , hardware(0)
    , hardwareRev(0)  {
  (void)_alloc;
    }



   typedef int32_t _deviceID_type;
  _deviceID_type deviceID;

   typedef int32_t _verMaj_type;
  _verMaj_type verMaj;

   typedef int32_t _verMin_type;
  _verMin_type verMin;

   typedef int32_t _verBuild_type;
  _verBuild_type verBuild;

   typedef int32_t _hardware_type;
  _hardware_type hardware;

   typedef int32_t _hardwareRev_type;
  _hardwareRev_type hardwareRev;





  typedef boost::shared_ptr< ::vmxpi_ros::TitanInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vmxpi_ros::TitanInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TitanInfo_

typedef ::vmxpi_ros::TitanInfo_<std::allocator<void> > TitanInfo;

typedef boost::shared_ptr< ::vmxpi_ros::TitanInfo > TitanInfoPtr;
typedef boost::shared_ptr< ::vmxpi_ros::TitanInfo const> TitanInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vmxpi_ros::TitanInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vmxpi_ros::TitanInfo_<ContainerAllocator1> & lhs, const ::vmxpi_ros::TitanInfo_<ContainerAllocator2> & rhs)
{
  return lhs.deviceID == rhs.deviceID &&
    lhs.verMaj == rhs.verMaj &&
    lhs.verMin == rhs.verMin &&
    lhs.verBuild == rhs.verBuild &&
    lhs.hardware == rhs.hardware &&
    lhs.hardwareRev == rhs.hardwareRev;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vmxpi_ros::TitanInfo_<ContainerAllocator1> & lhs, const ::vmxpi_ros::TitanInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vmxpi_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vmxpi_ros::TitanInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vmxpi_ros::TitanInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vmxpi_ros::TitanInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c9aee76b3d5cddac787b5c807fa2b41";
  }

  static const char* value(const ::vmxpi_ros::TitanInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c9aee76b3d5cddaULL;
  static const uint64_t static_value2 = 0xc787b5c807fa2b41ULL;
};

template<class ContainerAllocator>
struct DataType< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vmxpi_ros/TitanInfo";
  }

  static const char* value(const ::vmxpi_ros::TitanInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 deviceID\n"
"int32 verMaj\n"
"int32 verMin\n"
"int32 verBuild\n"
"int32 hardware\n"
"int32 hardwareRev\n"
;
  }

  static const char* value(const ::vmxpi_ros::TitanInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deviceID);
      stream.next(m.verMaj);
      stream.next(m.verMin);
      stream.next(m.verBuild);
      stream.next(m.hardware);
      stream.next(m.hardwareRev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TitanInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vmxpi_ros::TitanInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vmxpi_ros::TitanInfo_<ContainerAllocator>& v)
  {
    s << indent << "deviceID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deviceID);
    s << indent << "verMaj: ";
    Printer<int32_t>::stream(s, indent + "  ", v.verMaj);
    s << indent << "verMin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.verMin);
    s << indent << "verBuild: ";
    Printer<int32_t>::stream(s, indent + "  ", v.verBuild);
    s << indent << "hardware: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hardware);
    s << indent << "hardwareRev: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hardwareRev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VMXPI_ROS_MESSAGE_TITANINFO_H
